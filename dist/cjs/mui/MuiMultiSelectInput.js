"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MuiMultiSelectInput = MuiMultiSelectInput;

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _react = _interopRequireDefault(require("react"));

const useStyles = (0, _core.makeStyles)(theme => ({
  container: {
    flex: '1 1 auto',
    display: 'flex',
    flexDirection: 'column',
    '& > *': {
      flex: '0 0 auto',
      maxWidth: '100%'
    },
    '& > * + *': {
      marginTop: theme.spacing(1)
    }
  }
}));

function MuiMultiSelectInput({
  chatController,
  actionRequest
}) {
  const classes = useStyles();
  const chatCtl = chatController;

  const [values, setValues] = _react.default.useState([]);

  const handleSelect = _react.default.useCallback(value => {
    if (values.find(v => v === value) === undefined) {
      setValues([...values, value]);
    } else {
      setValues(values.filter(v => v !== value));
    }
  }, [values]);

  const setResponse = _react.default.useCallback(() => {
    const options = actionRequest.options.filter(o => values.includes(o.value));
    const res = {
      type: 'multi-select',
      value: options.map(o => o.text).toString(),
      options
    };
    chatCtl.setActionResponse(actionRequest, res);
    setValues([]);
  }, [actionRequest, chatCtl, values]);

  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.container
  }, actionRequest.options.map(o => /*#__PURE__*/_react.default.createElement(_core.Button, {
    key: actionRequest.options.indexOf(o),
    type: "button",
    value: o.value,
    onClick: e => handleSelect(e.currentTarget.value),
    variant: !values.includes(o.value) ? 'outlined' : 'contained',
    color: "primary"
  }, o.text)), /*#__PURE__*/_react.default.createElement(_core.Button, {
    type: "button",
    onClick: setResponse,
    disabled: values.length === 0,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_icons.Send, null)
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tdWkvTXVpTXVsdGlTZWxlY3RJbnB1dC50c3giXSwibmFtZXMiOlsidXNlU3R5bGVzIiwidGhlbWUiLCJjb250YWluZXIiLCJmbGV4IiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJtYXhXaWR0aCIsIm1hcmdpblRvcCIsInNwYWNpbmciLCJNdWlNdWx0aVNlbGVjdElucHV0IiwiY2hhdENvbnRyb2xsZXIiLCJhY3Rpb25SZXF1ZXN0IiwiY2xhc3NlcyIsImNoYXRDdGwiLCJ2YWx1ZXMiLCJzZXRWYWx1ZXMiLCJSZWFjdCIsInVzZVN0YXRlIiwiaGFuZGxlU2VsZWN0IiwidXNlQ2FsbGJhY2siLCJ2YWx1ZSIsImZpbmQiLCJ2IiwidW5kZWZpbmVkIiwiZmlsdGVyIiwic2V0UmVzcG9uc2UiLCJvcHRpb25zIiwibyIsImluY2x1ZGVzIiwicmVzIiwidHlwZSIsIm1hcCIsInRleHQiLCJ0b1N0cmluZyIsInNldEFjdGlvblJlc3BvbnNlIiwic2VuZEJ1dHRvblRleHQiLCJpbmRleE9mIiwiZSIsImN1cnJlbnRUYXJnZXQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQVFBLE1BQU1BLFNBQVMsR0FBRyxzQkFBWUMsS0FBRCxLQUFtQjtBQUM5Q0MsRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLElBQUksRUFBRSxVQURHO0FBRVRDLElBQUFBLE9BQU8sRUFBRSxNQUZBO0FBR1RDLElBQUFBLGFBQWEsRUFBRSxRQUhOO0FBSVQsYUFBUztBQUNQRixNQUFBQSxJQUFJLEVBQUUsVUFEQztBQUVQRyxNQUFBQSxRQUFRLEVBQUU7QUFGSCxLQUpBO0FBUVQsaUJBQWE7QUFDWEMsTUFBQUEsU0FBUyxFQUFFTixLQUFLLENBQUNPLE9BQU4sQ0FBYyxDQUFkO0FBREE7QUFSSjtBQURtQyxDQUFuQixDQUFYLENBQWxCOztBQWVPLFNBQVNDLG1CQUFULENBQTZCO0FBQ2xDQyxFQUFBQSxjQURrQztB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b3J0IHsgQnV0dG9uLCBUaGVtZSwgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCB7IFNlbmQgYXMgU2VuZEljb24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ2hhdENvbnRyb2xsZXIgfSBmcm9tICcuLi9jaGF0LWNvbnRyb2xsZXInO1xuaW1wb3J0IHtcbiAgTXVsdGlTZWxlY3RBY3Rpb25SZXF1ZXN0LFxuICBNdWx0aVNlbGVjdEFjdGlvblJlc3BvbnNlLFxufSBmcm9tICcuLi9jaGF0LXR5cGVzJztcblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWU6IFRoZW1lKSA9PiAoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAnJiA+IConOiB7XG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICAgICcmID4gKiArIConOiB7XG4gICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgfSxcbiAgfSxcbn0pKTtcblxuZXhwb3J0IGZ1bmN0aW9uIE11aU11bHRpU2VsZWN0SW5wdXQoe1xuICBjaGF0Q29udHJvbGxlcixcbiAgYWN0aW9uUmVxdWVzdCxcbn06IHtcbiAgY2hhdENvbnRyb2xsZXI6IENoYXRDb250cm9sbGVyO1xuICBhY3Rpb25SZXF1ZXN0OiBNdWx0aVNlbGVjdEFjdGlvblJlcXVlc3Q7XG59KTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xuICBjb25zdCBjaGF0Q3RsID0gY2hhdENvbnRyb2xsZXI7XG4gIGNvbnN0IFt2YWx1ZXMsIHNldFZhbHVlc10gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBpZiAodmFsdWVzLmZpbmQoKHYpID0+IHYgPT09IHZhbHVlKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNldFZhbHVlcyhbLi4udmFsdWVzLCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VmFsdWVzKHZhbHVlcy5maWx0ZXIoKHYpID0+IHYgIT09IHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbdmFsdWVzXSxcbiAgKTtcblxuICBjb25zdCBzZXRSZXNwb25zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gYWN0aW9uUmVxdWVzdC5vcHRpb25zLmZpbHRlcigobykgPT5cbiAgICAgIHZhbHVlcy5pbmNsdWRlcyhvLnZhbHVlKSxcbiAgICApO1xuXG4gICAgY29uc3QgcmVzOiBNdWx0aVNlbGVjdEFjdGlvblJlc3BvbnNlID0ge1xuICAgICAgdHlwZTogJ211bHRpLXNlbGVjdCcsXG4gICAgICB2YWx1ZTogb3B0aW9ucy5tYXAoKG8pID0+IG8udGV4dCkudG9TdHJpbmcoKSxcbiAgICAgIG9wdGlvbnMsXG4gICAgfTtcbiAgICBjaGF0Q3RsLnNldEFjdGlvblJlc3BvbnNlKGFjdGlvblJlcXVlc3QsIHJlcyk7XG4gICAgc2V0VmFsdWVzKFtdKTtcbiAgfSwgW2FjdGlvblJlcXVlc3QsIGNoYXRDdGwsIHZhbHVlc10pO1xuXG4gIGNvbnN0IHNlbmRCdXR0b25UZXh0ID0gYWN0aW9uUmVxdWVzdC5zZW5kQnV0dG9uVGV4dFxuICAgID8gYWN0aW9uUmVxdWVzdC5zZW5kQnV0dG9uVGV4dFxuICAgIDogJ1NlbmQnO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuY29udGFpbmVyfT5cbiAgICAgIHthY3Rpb25SZXF1ZXN0Lm9wdGlvbnMubWFwKChvKSA9PiAoXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBrZXk9e2FjdGlvblJlcXVlc3Qub3B0aW9ucy5pbmRleE9mKG8pfVxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIHZhbHVlPXtvLnZhbHVlfVxuICAgICAgICAgIG9uQ2xpY2s9eyhlKTogdm9pZCA9PiBoYW5kbGVTZWxlY3QoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICB2YXJpYW50PXshdmFsdWVzLmluY2x1ZGVzKG8udmFsdWUpID8gJ291dGxpbmVkJyA6ICdjb250YWluZWQnfVxuICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgID5cbiAgICAgICAgICB7by50ZXh0fVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICkpfVxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17c2V0UmVzcG9uc2V9XG4gICAgICAgIGRpc2FibGVkPXt2YWx1ZXMubGVuZ3RoID09PSAwfVxuICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgc3RhcnRJY29uPXs8U2VuZEljb24gLz59XG4gICAgICA+XG4gICAgICAgIHtzZW5kQnV0dG9uVGV4dH1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl19