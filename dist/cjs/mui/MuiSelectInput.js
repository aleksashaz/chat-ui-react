"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MuiSelectInput = MuiSelectInput;

var _core = require("@material-ui/core");

var _react = _interopRequireDefault(require("react"));

const useStyles = (0, _core.makeStyles)(theme => ({
  container: {
    flex: '1 1 auto',
    display: 'flex',
    flexDirection: 'column',
    '& > *': {
      flex: '0 0 auto',
      maxWidth: '100%'
    },
    '& > * + *': {
      marginTop: theme.spacing(1)
    }
  }
}));

function MuiSelectInput({
  chatController,
  actionRequest
}) {
  const classes = useStyles();
  const chatCtl = chatController;

  const setResponse = _react.default.useCallback(value => {
    const option = actionRequest.options.find(o => o.value === value);

    if (!option) {
      throw new Error(`Unknown value: ${value}`);
    }

    const res = {
      type: 'select',
      value: option.text,
      option
    };
    chatCtl.setActionResponse(actionRequest, res);
  }, [actionRequest, chatCtl]);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.container
  }, actionRequest.options.map(o => /*#__PURE__*/_react.default.createElement(_core.Button, {
    key: actionRequest.options.indexOf(o),
    type: "button",
    value: o.value,
    onClick: e => setResponse(e.currentTarget.value),
    variant: "contained",
    color: "primary"
  }, o.text)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tdWkvTXVpU2VsZWN0SW5wdXQudHN4Il0sIm5hbWVzIjpbInVzZVN0eWxlcyIsInRoZW1lIiwiY29udGFpbmVyIiwiZmxleCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwibWF4V2lkdGgiLCJtYXJnaW5Ub3AiLCJzcGFjaW5nIiwiTXVpU2VsZWN0SW5wdXQiLCJjaGF0Q29udHJvbGxlciIsImFjdGlvblJlcXVlc3QiLCJjbGFzc2VzIiwiY2hhdEN0bCIsInNldFJlc3BvbnNlIiwiUmVhY3QiLCJ1c2VDYWxsYmFjayIsInZhbHVlIiwib3B0aW9uIiwib3B0aW9ucyIsImZpbmQiLCJvIiwiRXJyb3IiLCJyZXMiLCJ0eXBlIiwidGV4dCIsInNldEFjdGlvblJlc3BvbnNlIiwibWFwIiwiaW5kZXhPZiIsImUiLCJjdXJyZW50VGFyZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFLQSxNQUFNQSxTQUFTLEdBQUcsc0JBQVlDLEtBQUQsS0FBbUI7QUFDOUNDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxJQUFJLEVBQUUsVUFERztBQUVUQyxJQUFBQSxPQUFPLEVBQUUsTUFGQTtBQUdUQyxJQUFBQSxhQUFhLEVBQUUsUUFITjtBQUlULGFBQVM7QUFDUEYsTUFBQUEsSUFBSSxFQUFFLFVBREM7QUFFUEcsTUFBQUEsUUFBUSxFQUFFO0FBRkgsS0FKQTtBQVFULGlCQUFhO0FBQ1hDLE1BQUFBLFNBQVMsRUFBRU4sS0FBSyxDQUFDTyxPQUFOLENBQWMsQ0FBZDtBQURBO0FBUko7QUFEbUMsQ0FBbkIsQ0FBWCxDQUFsQjs7QUFlTyxTQUFTQyxjQUFULENBQXdCO0FBQzdCQyxFQUFBQSxjQUQ2QjtBQUU3QkMsRUFBQUE7QUFGNkIsQ0FBeEIsRUFNZ0I7QUFDckIsUUFBTUMsT0FBTyxHQUFHWixTQUFTLEVBQXpCO0FBQ0EsUUFBTWEsT0FBTyxHQUFHSCxjQUFoQjs7QUFFQSxRQUFNSSxXQUFXLEdBQUdDLGVBQU1DLFdBQU4sQ0FDakJDLEtBQUQsSUFBeUI7QUFDdkIsVUFBTUMsTUFBTSxHQUFHUCxhQUFhLENBQUNRLE9BQWQsQ0FBc0JDLElBQXRCLENBQTRCQyxDQUFELElBQU9BLENBQUMsQ0FBQ0osS0FBRixLQUFZQSxLQUE5QyxDQUFmOztBQUNBLFFBQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1gsWUFBTSxJQUFJSSxLQUFKLENBQVcsa0JBQWlCTCxLQUFNLEVBQWxDLENBQU47QUFDRDs7QUFDRCxVQUFNTSxHQUF5QixHQUFHO0FBQ2hDQyxNQUFBQSxJQUFJLEVBQUUsUUFEMEI7QUFFaENQLE1BQUFBLEtBQUssRUFBRUMsTUFBTSxDQUFDTyxJQUZrQjtBQUdoQ1AsTUFBQUE7QUFIZ0MsS0FBbEM7QUFLQUwsSUFBQUEsT0FBTyxDQUFDYSxpQkFBUixDQUEwQmYsYUFBMUIsRUFBeUNZLEdBQXpDO0FBQ0QsR0FaaUIsRUFhbEIsQ0FBQ1osYUFBRCxFQUFnQkUsT0FBaEIsQ0Fia0IsQ0FBcEI7O0FBZ0JBLHNCQUNFO0FBQUssSUFBQSxTQUFTLEVBQUVELE9BQU8sQ0FBQ1Y7QUFBeEIsS0FDR1MsYUFBYSxDQUFDUSxPQUFkLENBQXNCUSxHQUF0QixDQUEyQk4sQ0FBRCxpQkFDekIsNkJBQUMsWUFBRDtBQUNFLElBQUEsR0FBRyxFQUFFVixhQUFhLENBQUNRLE9BQWQsQ0FBc0JTLE9BQXRCLENBQThCUCxDQUE5QixDQURQO0FBRUUsSUFBQSxJQUFJLEVBQUMsUUFGUDtBQUdFLElBQUEsS0FBSyxFQUFFQSxDQUFDLENBQUNKLEtBSFg7QUFJRSxJQUFBLE9BQU8sRUFBR1ksQ0FBRCxJQUFhZixXQUFXLENBQUNlLENBQUMsQ0FBQ0MsYUFBRixDQUFnQmIsS0FBakIsQ0FKbkM7QUFLRSxJQUFBLE9BQU8sRUFBQyxXQUxWO0FBTUUsSUFBQSxLQUFLLEVBQUM7QUFOUixLQVFHSSxDQUFDLENBQUNJLElBUkwsQ0FERCxDQURILENBREY7QUFnQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b24sIFRoZW1lLCBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ2hhdENvbnRyb2xsZXIgfSBmcm9tICcuLi9jaGF0LWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgU2VsZWN0QWN0aW9uUmVxdWVzdCwgU2VsZWN0QWN0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi9jaGF0LXR5cGVzJztcblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWU6IFRoZW1lKSA9PiAoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAnJiA+IConOiB7XG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICAgICcmID4gKiArIConOiB7XG4gICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgfSxcbiAgfSxcbn0pKTtcblxuZXhwb3J0IGZ1bmN0aW9uIE11aVNlbGVjdElucHV0KHtcbiAgY2hhdENvbnRyb2xsZXIsXG4gIGFjdGlvblJlcXVlc3QsXG59OiB7XG4gIGNoYXRDb250cm9sbGVyOiBDaGF0Q29udHJvbGxlcjtcbiAgYWN0aW9uUmVxdWVzdDogU2VsZWN0QWN0aW9uUmVxdWVzdDtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG4gIGNvbnN0IGNoYXRDdGwgPSBjaGF0Q29udHJvbGxlcjtcblxuICBjb25zdCBzZXRSZXNwb25zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBvcHRpb24gPSBhY3Rpb25SZXF1ZXN0Lm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgaWYgKCFvcHRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHZhbHVlOiAke3ZhbHVlfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzOiBTZWxlY3RBY3Rpb25SZXNwb25zZSA9IHtcbiAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgIHZhbHVlOiBvcHRpb24udGV4dCxcbiAgICAgICAgb3B0aW9uLFxuICAgICAgfTtcbiAgICAgIGNoYXRDdGwuc2V0QWN0aW9uUmVzcG9uc2UoYWN0aW9uUmVxdWVzdCwgcmVzKTtcbiAgICB9LFxuICAgIFthY3Rpb25SZXF1ZXN0LCBjaGF0Q3RsXSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRhaW5lcn0+XG4gICAgICB7YWN0aW9uUmVxdWVzdC5vcHRpb25zLm1hcCgobykgPT4gKFxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAga2V5PXthY3Rpb25SZXF1ZXN0Lm9wdGlvbnMuaW5kZXhPZihvKX1cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICB2YWx1ZT17by52YWx1ZX1cbiAgICAgICAgICBvbkNsaWNrPXsoZSk6IHZvaWQgPT4gc2V0UmVzcG9uc2UoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICA+XG4gICAgICAgICAge28udGV4dH1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ==