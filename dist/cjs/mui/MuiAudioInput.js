"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MuiAudioInput = MuiAudioInput;

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _KeyboardVoice = _interopRequireDefault(require("@material-ui/icons/KeyboardVoice"));

var _react = _interopRequireDefault(require("react"));

var _audioMediaRecorder = require("../audio-media-recorder");

const useStyles = (0, _core.makeStyles)(theme => ({
  container: {
    flex: '1 1 auto',
    display: 'flex',
    '& > *': {
      flex: '1 1 auto',
      minWidth: 0
    },
    '& > * + *': {
      marginLeft: theme.spacing(1)
    }
  }
}));

function MuiAudioInput({
  chatController,
  actionRequest
}) {
  const classes = useStyles();
  const chatCtl = chatController;

  const [audioRec] = _react.default.useState(_audioMediaRecorder.AudioMediaRecorder.getInstance());

  const [stopped, setStopped] = _react.default.useState(true);

  const [audio, setAudio] = _react.default.useState();

  const handleError = _react.default.useCallback(error => {
    const value = {
      type: 'audio',
      value: error.message,
      error
    };
    chatCtl.setActionResponse(actionRequest, value);
  }, [actionRequest, chatCtl]);

  const handleStart = _react.default.useCallback(async () => {
    try {
      await audioRec.initialize();
      await audioRec.startRecord();
      setStopped(false);
    } catch (error) {
      handleError(error);
    }
  }, [audioRec, handleError]);

  const handleStop = _react.default.useCallback(async () => {
    try {
      const a = await audioRec.stopRecord();
      setAudio(a);
      setStopped(true);
    } catch (error) {
      handleError(error);
    }
  }, [audioRec, handleError]);

  const sendResponse = _react.default.useCallback(() => {
    if (audio) {
      const value = {
        type: 'audio',
        value: 'Audio',
        audio
      };
      chatCtl.setActionResponse(actionRequest, value);
      setAudio(undefined);
    }
  }, [actionRequest, audio, chatCtl]);

  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.container
  }, stopped && /*#__PURE__*/_react.default.createElement(_core.Button, {
    type: "button",
    onClick: handleStart,
    disabled: !stopped,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_KeyboardVoice.default, null)
  }, "Rec start"), !stopped && /*#__PURE__*/_react.default.createElement(_core.Button, {
    type: "button",
    onClick: handleStop,
    disabled: stopped,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_icons.Stop, null)
  }, "Rec stop"), /*#__PURE__*/_react.default.createElement(_core.Button, {
    type: "button",
    onClick: sendResponse,
    disabled: !audio,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_icons.Send, null)
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,