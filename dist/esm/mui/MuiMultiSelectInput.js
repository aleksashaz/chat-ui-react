import { Button, makeStyles } from '@material-ui/core';
import { Send as SendIcon } from '@material-ui/icons';
import React from 'react';
const useStyles = makeStyles(theme => ({
  container: {
    flex: '1 1 auto',
    display: 'flex',
    flexDirection: 'column',
    '& > *': {
      flex: '0 0 auto',
      maxWidth: '100%'
    },
    '& > * + *': {
      marginTop: theme.spacing(1)
    }
  }
}));
export function MuiMultiSelectInput({
  chatController,
  actionRequest
}) {
  const classes = useStyles();
  const chatCtl = chatController;
  const [values, setValues] = React.useState([]);
  const handleSelect = React.useCallback(value => {
    if (values.find(v => v === value) === undefined) {
      setValues([...values, value]);
    } else {
      setValues(values.filter(v => v !== value));
    }
  }, [values]);
  const setResponse = React.useCallback(() => {
    const options = actionRequest.options.filter(o => values.includes(o.value));
    const res = {
      type: 'multi-select',
      value: options.map(o => o.text).toString(),
      options
    };
    chatCtl.setActionResponse(actionRequest, res);
    setValues([]);
  }, [actionRequest, chatCtl, values]);
  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/React.createElement("div", {
    className: classes.container
  }, actionRequest.options.map(o => /*#__PURE__*/React.createElement(Button, {
    key: actionRequest.options.indexOf(o),
    type: "button",
    value: o.value,
    onClick: e => handleSelect(e.currentTarget.value),
    variant: !values.includes(o.value) ? 'outlined' : 'contained',
    color: "primary"
  }, o.text)), /*#__PURE__*/React.createElement(Button, {
    type: "button",
    onClick: setResponse,
    disabled: values.length === 0,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(SendIcon, null)
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tdWkvTXVpTXVsdGlTZWxlY3RJbnB1dC50c3giXSwibmFtZXMiOlsiQnV0dG9uIiwibWFrZVN0eWxlcyIsIlNlbmQiLCJTZW5kSWNvbiIsIlJlYWN0IiwidXNlU3R5bGVzIiwidGhlbWUiLCJjb250YWluZXIiLCJmbGV4IiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJtYXhXaWR0aCIsIm1hcmdpblRvcCIsInNwYWNpbmciLCJNdWlNdWx0aVNlbGVjdElucHV0IiwiY2hhdENvbnRyb2xsZXIiLCJhY3Rpb25SZXF1ZXN0IiwiY2xhc3NlcyIsImNoYXRDdGwiLCJ2YWx1ZXMiLCJzZXRWYWx1ZXMiLCJ1c2VTdGF0ZSIsImhhbmRsZVNlbGVjdCIsInVzZUNhbGxiYWNrIiwidmFsdWUiLCJmaW5kIiwidiIsInVuZGVmaW5lZCIsImZpbHRlciIsInNldFJlc3BvbnNlIiwib3B0aW9ucyIsIm8iLCJpbmNsdWRlcyIsInJlcyIsInR5cGUiLCJtYXAiLCJ0ZXh0IiwidG9TdHJpbmciLCJzZXRBY3Rpb25SZXNwb25zZSIsInNlbmRCdXR0b25UZXh0IiwiaW5kZXhPZiIsImUiLCJjdXJyZW50VGFyZ2V0IiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxNQUFULEVBQXdCQyxVQUF4QixRQUEwQyxtQkFBMUM7QUFDQSxTQUFTQyxJQUFJLElBQUlDLFFBQWpCLFFBQWlDLG9CQUFqQztBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFRQSxNQUFNQyxTQUFTLEdBQUdKLFVBQVUsQ0FBRUssS0FBRCxLQUFtQjtBQUM5Q0MsRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLElBQUksRUFBRSxVQURHO0FBRVRDLElBQUFBLE9BQU8sRUFBRSxNQUZBO0FBR1RDLElBQUFBLGFBQWEsRUFBRSxRQUhOO0FBSVQsYUFBUztBQUNQRixNQUFBQSxJQUFJLEVBQUUsVUFEQztBQUVQRyxNQUFBQSxRQUFRLEVBQUU7QUFGSCxLQUpBO0FBUVQsaUJB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LEtBQWtCLENBSDlCO0FBSUUsSUFBQSxPQUFPLEVBQUMsV0FKVjtBQUtFLElBQUEsS0FBSyxFQUFDLFNBTFI7QUFNRSxJQUFBLFNBQVMsZUFBRSxvQkFBQyxRQUFEO0FBTmIsS0FRR0osY0FSSCxDQWJGLENBREY7QUEwQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b24sIFRoZW1lLCBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IHsgU2VuZCBhcyBTZW5kSWNvbiB9IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBDaGF0Q29udHJvbGxlciB9IGZyb20gJy4uL2NoYXQtY29udHJvbGxlcic7XG5pbXBvcnQge1xuICBNdWx0aVNlbGVjdEFjdGlvblJlcXVlc3QsXG4gIE11bHRpU2VsZWN0QWN0aW9uUmVzcG9uc2UsXG59IGZyb20gJy4uL2NoYXQtdHlwZXMnO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+ICh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICcmID4gKic6IHtcbiAgICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgIH0sXG4gICAgJyYgPiAqICsgKic6IHtcbiAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygxKSxcbiAgICB9LFxuICB9LFxufSkpO1xuXG5leHBvcnQgZnVuY3Rpb24gTXVpTXVsdGlTZWxlY3RJbnB1dCh7XG4gIGNoYXRDb250cm9sbGVyLFxuICBhY3Rpb25SZXF1ZXN0LFxufToge1xuICBjaGF0Q29udHJvbGxlcjogQ2hhdENvbnRyb2xsZXI7XG4gIGFjdGlvblJlcXVlc3Q6IE11bHRpU2VsZWN0QWN0aW9uUmVxdWVzdDtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG4gIGNvbnN0IGNoYXRDdGwgPSBjaGF0Q29udHJvbGxlcjtcbiAgY29uc3QgW3ZhbHVlcywgc2V0VmFsdWVzXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0ID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgIGlmICh2YWx1ZXMuZmluZCgodikgPT4gdiA9PT0gdmFsdWUpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0VmFsdWVzKFsuLi52YWx1ZXMsIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRWYWx1ZXModmFsdWVzLmZpbHRlcigodikgPT4gdiAhPT0gdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFt2YWx1ZXNdLFxuICApO1xuXG4gIGNvbnN0IHNldFJlc3BvbnNlID0gUmVhY3QudXNlQ2FsbGJhY2soKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhY3Rpb25SZXF1ZXN0Lm9wdGlvbnMuZmlsdGVyKChvKSA9PlxuICAgICAgdmFsdWVzLmluY2x1ZGVzKG8udmFsdWUpLFxuICAgICk7XG5cbiAgICBjb25zdCByZXM6IE11bHRpU2VsZWN0QWN0aW9uUmVzcG9uc2UgPSB7XG4gICAgICB0eXBlOiAnbXVsdGktc2VsZWN0JyxcbiAgICAgIHZhbHVlOiBvcHRpb25zLm1hcCgobykgPT4gby50ZXh0KS50b1N0cmluZygpLFxuICAgICAgb3B0aW9ucyxcbiAgICB9O1xuICAgIGNoYXRDdGwuc2V0QWN0aW9uUmVzcG9uc2UoYWN0aW9uUmVxdWVzdCwgcmVzKTtcbiAgICBzZXRWYWx1ZXMoW10pO1xuICB9LCBbYWN0aW9uUmVxdWVzdCwgY2hhdEN0bCwgdmFsdWVzXSk7XG5cbiAgY29uc3Qgc2VuZEJ1dHRvblRleHQgPSBhY3Rpb25SZXF1ZXN0LnNlbmRCdXR0b25UZXh0XG4gICAgPyBhY3Rpb25SZXF1ZXN0LnNlbmRCdXR0b25UZXh0XG4gICAgOiAnU2VuZCc7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250YWluZXJ9PlxuICAgICAge2FjdGlvblJlcXVlc3Qub3B0aW9ucy5tYXAoKG8pID0+IChcbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGtleT17YWN0aW9uUmVxdWVzdC5vcHRpb25zLmluZGV4T2Yobyl9XG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgdmFsdWU9e28udmFsdWV9XG4gICAgICAgICAgb25DbGljaz17KGUpOiB2b2lkID0+IGhhbmRsZVNlbGVjdChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfVxuICAgICAgICAgIHZhcmlhbnQ9eyF2YWx1ZXMuaW5jbHVkZXMoby52YWx1ZSkgPyAnb3V0bGluZWQnIDogJ2NvbnRhaW5lZCd9XG4gICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgPlxuICAgICAgICAgIHtvLnRleHR9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgKSl9XG4gICAgICA8QnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBvbkNsaWNrPXtzZXRSZXNwb25zZX1cbiAgICAgICAgZGlzYWJsZWQ9e3ZhbHVlcy5sZW5ndGggPT09IDB9XG4gICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICBzdGFydEljb249ezxTZW5kSWNvbiAvPn1cbiAgICAgID5cbiAgICAgICAge3NlbmRCdXR0b25UZXh0fVxuICAgICAgPC9CdXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0=