import { Button, TextField, makeStyles } from '@material-ui/core';
import { Send as SendIcon } from '@material-ui/icons';
import React from 'react';
const useStyles = makeStyles(theme => ({
  container: {
    flex: '1 1 auto',
    display: 'flex',
    '& > *': {
      flex: '1 1 auto',
      minWidth: 0
    },
    '& > * + *': {
      marginLeft: theme.spacing(1)
    },
    '& :last-child': {
      flex: '0 1 auto'
    }
  }
}));
export function MuiTextInput({
  chatController,
  actionRequest
}) {
  const classes = useStyles();
  const chatCtl = chatController;
  const [value, setValue] = React.useState(actionRequest.defaultValue);
  const setResponse = React.useCallback(() => {
    if (value) {
      const res = {
        type: 'text',
        value
      };
      chatCtl.setActionResponse(actionRequest, res);
      setValue('');
    }
  }, [actionRequest, chatCtl, value]);
  const handleKeyDown = React.useCallback(e => {
    if (e.nativeEvent.isComposing) {
      return;
    }

    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      setResponse();
    }
  }, [setResponse]);
  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/React.createElement("div", {
    className: classes.container
  }, /*#__PURE__*/React.createElement(TextField, {
    placeholder: actionRequest.placeholder,
    value: value,
    onChange: e => setValue(e.target.value),
    autoFocus: true,
    multiline: true,
    inputProps: {
      onKeyDown: handleKeyDown
    },
    variant: "outlined",
    rowsMax: 10
  }), /*#__PURE__*/React.createElement(Button, {
    type: "button",
    onClick: setResponse,
    disabled: !value,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(SendIcon, null)
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tdWkvTXVpVGV4dElucHV0LnRzeCJdLCJuYW1lcyI6WyJCdXR0b24iLCJUZXh0RmllbGQiLCJtYWtlU3R5bGVzIiwiU2VuZCIsIlNlbmRJY29uIiwiUmVhY3QiLCJ1c2VTdHlsZXMiLCJ0aGVtZSIsImNvbnRhaW5lciIsImZsZXgiLCJkaXNwbGF5IiwibWluV2lkdGgiLCJtYXJnaW5MZWZ0Iiwic3BhY2luZyIsIk11aVRleHRJbnB1dCIsImNoYXRDb250cm9sbGVyIiwiYWN0aW9uUmVxdWVzdCIsImNsYXNzZXMiLCJjaGF0Q3RsIiwidmFsdWUiLCJzZXRWYWx1ZSIsInVzZVN0YXRlIiwiZGVmYXVsdFZhbHVlIiwic2V0UmVzcG9uc2UiLCJ1c2VDYWxsYmFjayIsInJlcyIsInR5cGUiLCJzZXRBY3Rpb25SZXNwb25zZSIsImhhbmRsZUtleURvd24iLCJlIiwibmF0aXZlRXZlbnQiLCJpc0NvbXBvc2luZyIsImtleSIsInNoaWZ0S2V5IiwicHJldmVudERlZmF1bHQiLCJzZW5kQnV0dG9uVGV4dCIsInBsYWNlaG9sZGVyIiwidGFyZ2V0Iiwib25LZXlEb3duIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxNQUFULEVBQWlCQyxTQUFqQixFQUFtQ0MsVUFBbkMsUUFBcUQsbUJBQXJEO0FBQ0EsU0FBU0MsSUFBSSxJQUFJQyxRQUFqQixRQUFpQyxvQkFBakM7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBS0EsTUFBTUMsU0FBUyxHQUFHSixVQUFVLENBQUVLLEtBQUQsS0FBbUI7QUFDOUNDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxJQUFJLEVBQUUsVUFERztBQUVUQyxJQUFBQSxPQUFPLEVBQUUsTUFGQTtBQUdULGFBQVM7QUFDUEQsTUFBQUEsSUFBSSxFQUFFLFVBREM7QUFFUEUsTUFBQUEsUUFBUSxFQUFFO0FBRkgsS0FIQTtBQU9ULGlCQUFhO0FBQ1hDLE1BQUFBLFVBQVUsRUFBRUwsS0FBSyxDQUFDTSxPQUFOLENBQWMsQ0FBZDtBQURELEtBUEo7QUFVVCxxQkFBaUI7QUFDZkosTUFBQUEsSUFBSSxFQUFFO0FBRFM7QUFWUjtBQURtQyxDQUFuQixDQUFELENBQTVCO0FBaUJBLE9BQU8sU0FBU0ssWUFBVCxDQUFzQjtBQUMzQkMsRUFBQUEsY0FEMkI7QUFFM0JDLEVBQUFBO0FBRjJCLENBQXRCLEVBTWdCO0FBQ3JCLFFBQU1DLE9BQU8sR0FBR1gsU0FBUyxFQUF6QjtBQUNBLFFBQU1ZLE9BQU8sR0FBR0gsY0FBaEI7QUFDQSxRQUFNLENBQUNJLEtBQUQsRUFBUUMsUUFBUixJQUFvQmYsS0FBSyxDQUFDZ0IsUUFBTixDQUFlTCxhQUFhLENBQUNNLFlBQTdCLENBQTFCO0FBRUEsUUFBTUMsV0FBVyxHQUFHbEIsS0FBSyxDQUFDbUIsV0FBTixDQUFrQixNQUFZO0FBQ2hELFFBQUlMLEtBQUosRUFBVztBQUNULFlBQU1NLEdBQXVCLEdBQUc7QUFBRUMsUUFBQUEsSUFBSSxFQUFFLE1BQVI7QUFBZ0JQLFFBQUFBO0FBQWhCLE9BQWhDO0FBQ0FELE1BQUFBLE9BQU8sQ0FBQ1MsaUJBQVIsQ0FBMEJYLGFBQTFCLEVBQXlDUyxHQUF6QztBQUNBTCxNQUFBQSxRQUFRLENBQUMsRUFBRCxDQUFSO0FBQ0Q7QUFDRixHQU5tQixFQU1qQixDQUFDSixhQUFELEVBQWdCRSxPQUFoQixFQUF5QkMsS0FBekIsQ0FOaUIsQ0FBcEI7QUFRQSxRQUFNUyxhQUFhLEdBQUd2QixLQUFLLENBQUNtQixXQUFOLENBQ25CSyxDQUFELElBQXVEO0FBQ3JELFFBQUlBLENBQUMsQ0FBQ0MsV0FBRixDQUFjQyxXQUFsQixFQUErQjtBQUM3QjtBQUNEOztBQUVELFFBQUlGLENBQUMsQ0FBQ0csR0FBRixLQUFVLE9BQVYsSUFBcUIsQ0FBQ0gsQ0FBQyxDQUFDSSxRQUE1QixFQUFzQztBQUNwQ0osTUFBQUEsQ0FBQyxDQUFDSyxjQUFGO0FBQ0FYLE1BQUFBLFdBQVc7QUFDWjtBQUNGLEdBVm1CLEVBV3BCLENBQUNBLFdBQUQsQ0FYb0IsQ0FBdEI7QUFjQSxRQUFNWSxjQUFjLEdBQUduQixhQUFhLENBQUNtQixjQUFkLEdBQ25CbkIsYUFBYSxDQUFDbUIsY0FESyxHQUVuQixNQUZKO0FBSUEsc0JBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBRWxCLE9BQU8sQ0FBQ1Q7QUFBeEIsa0JBQ0Usb0JBQUMsU0FBRDtBQUNFLElBQUEsV0FBVyxFQUFFUSxhQUFhLENBQUNvQixXQUQ3QjtBQUVFLElBQUEsS0FBSyxFQUFFakIsS0FGVDtBQUdFLElBQUEsUUFBUSxFQUFHVSxDQUFELElBQWFULFFBQVEsQ0FBQ1MsQ0FBQyxDQUFDUSxNQUFGLENBQVNsQixLQUFWLENBSGpDO0FBSUUsSUFBQSxTQUFTLE1BSlg7QUFLRSxJQUFBLFNBQVMsTUFMWDtBQU1FLElBQUEsVUFBVSxFQUFFO0FBQUVtQixNQUFBQSxTQUFTLEVBQUVWO0FBQWIsS0FOZDtBQU9FLElBQUEsT0FBTyxFQUFDLFVBUFY7QUFRRSxJQUFBLE9BQU8sRUFBRTtBQVJYLElBREYsZUFXRSxvQkFBQyxNQUFEO0FBQ0UsSUFBQSxJQUFJLEVBQUMsUUFEUDtBQUVFLElBQUEsT0FBTyxFQUFFTCxXQUZYO0FBR0UsSUFBQSxRQUFRLEVBQUUsQ0FBQ0osS0FIYjtBQUlFLElBQUEsT0FBTyxFQUFDLFdBSlY7QUFLRSxJQUFBLEtBQUssRUFBQyxTQUxSO0FBTUUsSUFBQSxTQUFTLGVBQUUsb0JBQUMsUUFBRDtBQU5iLEtBUUdnQixjQVJILENBWEYsQ0FERjtBQXdCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvbiwgVGV4dEZpZWxkLCBUaGVtZSwgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCB7IFNlbmQgYXMgU2VuZEljb24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ2hhdENvbnRyb2xsZXIgfSBmcm9tICcuLi9jaGF0LWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgVGV4dEFjdGlvblJlcXVlc3QsIFRleHRBY3Rpb25SZXNwb25zZSB9IGZyb20gJy4uL2NoYXQtdHlwZXMnO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZTogVGhlbWUpID0+ICh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICcmID4gKic6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICB9LFxuICAgICcmID4gKiArIConOiB7XG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nKDEpLFxuICAgIH0sXG4gICAgJyYgOmxhc3QtY2hpbGQnOiB7XG4gICAgICBmbGV4OiAnMCAxIGF1dG8nLFxuICAgIH0sXG4gIH0sXG59KSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBNdWlUZXh0SW5wdXQoe1xuICBjaGF0Q29udHJvbGxlcixcbiAgYWN0aW9uUmVxdWVzdCxcbn06IHtcbiAgY2hhdENvbnRyb2xsZXI6IENoYXRDb250cm9sbGVyO1xuICBhY3Rpb25SZXF1ZXN0OiBUZXh0QWN0aW9uUmVxdWVzdDtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG4gIGNvbnN0IGNoYXRDdGwgPSBjaGF0Q29udHJvbGxlcjtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShhY3Rpb25SZXF1ZXN0LmRlZmF1bHRWYWx1ZSk7XG5cbiAgY29uc3Qgc2V0UmVzcG9uc2UgPSBSZWFjdC51c2VDYWxsYmFjaygoKTogdm9pZCA9PiB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCByZXM6IFRleHRBY3Rpb25SZXNwb25zZSA9IHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9O1xuICAgICAgY2hhdEN0bC5zZXRBY3Rpb25SZXNwb25zZShhY3Rpb25SZXF1ZXN0LCByZXMpO1xuICAgICAgc2V0VmFsdWUoJycpO1xuICAgIH1cbiAgfSwgW2FjdGlvblJlcXVlc3QsIGNoYXRDdGwsIHZhbHVlXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChlOiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQ+KTogdm9pZCA9PiB7XG4gICAgICBpZiAoZS5uYXRpdmVFdmVudC5pc0NvbXBvc2luZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyAmJiAhZS5zaGlmdEtleSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldFJlc3BvbnNlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2V0UmVzcG9uc2VdLFxuICApO1xuXG4gIGNvbnN0IHNlbmRCdXR0b25UZXh0ID0gYWN0aW9uUmVxdWVzdC5zZW5kQnV0dG9uVGV4dFxuICAgID8gYWN0aW9uUmVxdWVzdC5zZW5kQnV0dG9uVGV4dFxuICAgIDogJ1NlbmQnO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuY29udGFpbmVyfT5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgcGxhY2Vob2xkZXI9e2FjdGlvblJlcXVlc3QucGxhY2Vob2xkZXJ9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9eyhlKTogdm9pZCA9PiBzZXRWYWx1ZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgaW5wdXRQcm9wcz17eyBvbktleURvd246IGhhbmRsZUtleURvd24gfX1cbiAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgcm93c01heD17MTB9XG4gICAgICAvPlxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17c2V0UmVzcG9uc2V9XG4gICAgICAgIGRpc2FibGVkPXshdmFsdWV9XG4gICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICBzdGFydEljb249ezxTZW5kSWNvbiAvPn1cbiAgICAgID5cbiAgICAgICAge3NlbmRCdXR0b25UZXh0fVxuICAgICAgPC9CdXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0=